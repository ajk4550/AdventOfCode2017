# Advent of Code - Challenge 1
# Compares the next number in the captcha to the current number. If the numbers match
# add the number to a running total, otherwise ignore that number. The list is circular
# which means the first CAN match the last element
# Examples:
# 1122 = 3
# 1111 = 4
# 1234 = 0
# 91212129 = 9
#
# Aaron Kaye, 2017
# Expected answer: 1182

captcha

# Iterative approach
def solve_iterative():
    sum = 0 # Cumulative sum
    cap_list = list(str(captcha)) # Converting captcha to list
    cap_size = len(cap_list) # Capturing size of captcha list
    prev_el = 0 # The previous element visited
    for i in range(cap_size):
        current = int(cap_list[i]) # setting the current element
        if current == prev_el:
            # Current element is the same as previous, add to sum
            sum += current
        # update the previous element to current
        prev_el = current
    # Edge case, checking if first is equal to last
    if cap_list[0] == cap_list[cap_size-1]:
        sum += int(cap_list[0])
    # Final result
    return sum

# Recursive solution. Causes stack overflow on large lists.
def solve_recursively():
    cap_list = list(str(captcha))
    sum = 0
    # Taking care of edge case
    if cap_list[0] == cap_list[len(cap_list) - 1]:
        sum += int(cap_list[0])
    sum += solve_recursive_helper(cap_list, 0)
    return sum

def solve_recursive_helper(current_cap, prev_el):
    sum_add = 0 # Amount to add to running sum
    print(current_cap)
    print(prev_el)
    # Base case
    if len(current_cap) == 0:
        return 0
    else:
        if int(current_cap[0]) == prev_el:
            # Found a match, add to running sum
            sum_add = prev_el
        prev_el = int(current_cap[0]) # setting the new prev_el
        current_cap.pop(0) # Removing the first element from the list
        return sum_add + solve_recursive_helper(current_cap, prev_el) # Recursive call

def main():
    print "Captcha result: " + str(solve_iterative())
    # print solve_recursively() # Recursive definition causes stack overflow
main()
